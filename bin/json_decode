#!/bin/php
<?php
array_shift($argv);

$path = array_shift($argv);
$export = array_shift($argv);

if($path){
	$path = realpath($path);
	file_put_contents('/dev/stderr', "reading $path\n" );
	$content = file_get_contents($path);
}else{
	file_put_contents('/dev/stderr', "reading stdin\n" );
	$content = fread(STDIN, 655350);
}

$data = json_decode($content,true);
if(null === $data){
	file_put_contents('/dev/stderr', json_last_message() ."\n" );
	die(2);
}

$action_list= array(
"php" => function($data){
	var_export($data);
},
"php-full" => function($data){
	echo "<?php\nreturn ";
	var_export($data);
	echo ";";
},
"bash"=> function($data){
	foreach($data as $k => $v){
		$v=trim($v);
		echo $k."=".addslashes($v)."\n";
	}
},
"bash-up"=> function($data){ // DATA_FIRST="value" --data-second="value"
	foreach($data as $k => $v){
		if(!is_scalar($v)){
			file_put_contents('/dev/stderr', "non scalar to bash\n" );
			exit(1);
		}
		$v=trim($v);
		if(is_int($k)){
			file_put_contents('/dev/stderr', "plain array to bash\n" );
			exit(1);
		}
		echo preg_replace_callback('#([A-Z]|[_\-][a-z])#',function($mats){
			return strtoupper(str_replace('-','_',$mats[1]));
		},$k)."=".addslashes($v)."\n";
	}
},
"bash-down"=> function($data){ // data_first="value" \n data_second="value"
	foreach($data as $k => $v){
		if(!is_scalar($v)){
			file_put_contents('/dev/stderr', "non scalar to bash\n" );
			exit(1);
		}
		$v=trim($v);
		if(is_int($k)){
			file_put_contents('/dev/stderr', "plain array to bash\n" );
			exit(1);
		}
		echo preg_replace_callback('#([A-Z]|[_\-][a-z])#',function($mats){
			return strtolower(str_replace('-','_',$mats[1]));
		},$k)."=".addslashes($v)."\n";
	}
},
"bash-arg"=> function($data){ // --data-first="value" --data-second="value"
	$ret = [];
	foreach($data as $k => $v){
		if(!is_scalar($v)){
			file_put_contents('/dev/stderr', "non scalar to bash\n" );
			exit(1);
		}
		$v=trim($v);
		if(is_int($k)){
			file_put_contents('/dev/stderr', "plain array to bash\n" );
			exit(1);
		}
		$v = $v? addslashes($v): "''";
		$ret[] = '--'.preg_replace_callback('#([A-Z])|_([a-z])#',function($mats){
			return '-'.strtolower(isset($mats[2])?$mats[2]:$mats[1]);
		},$k)."=".$v." ";
	}
	echo implode("\\\n\t", $ret);
}


);


if(!isset($action_list[$export])){
	file_put_contents('/dev/stderr', "Unknown export target $export\n" );
	file_put_contents('/dev/stderr', "\t\tvalid types: ".implode(', ', array_keys($action_list)) . "\n");
	die(2);
}

file_put_contents('/dev/stderr', "export to target: $export\n" );
$action_list[$export]($data);
file_put_contents('/dev/stderr', "all finished.\n" );

function json_last_message(){
	switch(json_last_error()){
	case JSON_ERROR_NONE:
		return 'No errors';

	case JSON_ERROR_DEPTH:
		return 'Maximum stack depth exceeded';

	case JSON_ERROR_STATE_MISMATCH:
		return 'Underflow or the modes mismatch';

	case JSON_ERROR_CTRL_CHAR:
		return 'Unexpected control character found';

	case JSON_ERROR_SYNTAX:
		return 'Syntax error, malformed JSON';

	case JSON_ERROR_UTF8:
		return 'Malformed UTF-8 characters, possibly incorrectly encoded';

	default:
		return 'Unknown error';
	}
}
